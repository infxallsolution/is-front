{"version":3,"file":"static/js/282.d88535da.chunk.js","mappings":"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","sources":["components/shared-components/AppHeader/index.js","components/util-components/IntlMessage/index.js","services/AuthHeader.js","utils/generateLineData.js","components/app-components/Global/ChartComponent.js","services/DashboardService.js","views/app-views/dashboards/default/index.js"],"sourcesContent":["import { css } from '@emotion/react'\nimport { Breadcrumb } from 'antd'\nimport IntlMessage from 'components/util-components/IntlMessage'\nimport { MEDIA_QUERIES } from 'constants/ThemeConstant'\nimport React from 'react'\n\nconst AppHeader = ({ title, items }) => {\n  return (\n    <div\n      css={css`\n        align-items: center;\n        margin-bottom: 1rem;\n\n        @media ${MEDIA_QUERIES.LAPTOP_ABOVE} {\n          display: flex;\n        }\n      `}\n    >\n      <h3 className=\"mb-0 mr-3 font-weight-semibold\">\n        <IntlMessage id={title} />\n      </h3>\n      <Breadcrumb items={items} />\n    </div>\n  );\n};\n\nexport default AppHeader","import React from 'react';\nimport { useTranslation } from 'react-i18next'\n\nconst IntlMessage = ({ id, fallback }) => {\n\n\tconst { t } = useTranslation()\n\n\tconst translate = t(id, fallback)\n\n\treturn <>{translate}</>\n}\n\nexport default IntlMessage;\n","import { AUTH_TOKEN } from \"constants/AuthConstant\";\n\nconst authHeader = () => {\n  const jwtToken = localStorage.getItem(AUTH_TOKEN);\n\n  if (jwtToken) {\n    return {\n      Authorization: `Bearer ${jwtToken}`,\n      \"Content-type\": \"application/json\",\n    };\n  } else {\n    return {};\n  }\n};\n\n\nexport { authHeader };","const samplePoint = (i) =>\r\n  i *\r\n    (0.5 +\r\n      Math.sin(i / 10) * 0.2 +\r\n      Math.sin(i / 20) * 0.4 +\r\n      Math.sin(i / randomFactor) * 0.8 +\r\n      Math.sin(i / 500) * 0.5) +\r\n  200;\r\n\r\nlet randomFactor = 25 + Math.random() * 25;\r\n\r\nfunction generateLineData(numberOfPoints) {\r\n  randomFactor = 25 + Math.random() * 25;\r\n  const res = [];\r\n  const date = new Date(Date.UTC(2018, 0, 1, 12, 0, 0, 0));\r\n  for (let i = 0; i < numberOfPoints; ++i) {\r\n    const time = date.getTime() / 1000;\r\n    const value = samplePoint(i);\r\n    res.push({\r\n      time,\r\n      value,\r\n    });\r\n\r\n    date.setUTCDate(date.getUTCDate() + 1);\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nconst generateRandomColor = () => {\r\n   const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\r\n   const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\r\n   const color = `#00${green}${blue}`;\r\n   return color;\r\n}\r\n\r\nexport {generateLineData, generateRandomColor};\r\n","import { createChart, ColorType } from \"lightweight-charts\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { generateRandomColor } from \"utils/generateLineData\";\n\nexport const ChartComponent = (props) => {\n  const {\n    data,\n    type,\n    series,\n    colors: {\n      backgroundColor = \"white\",\n      lineColor = \"#2962FF\",\n      textColor = \"black\",\n      areaTopColor = \"#2962FF\",\n      areaBottomColor = \"rgba(41, 98, 255, 0.28)\",\n    } = {},\n  } = props;\n\n  const chartContainerRef = useRef();\n\n  const [legend, setLegend] = useState([]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      chart.applyOptions({ width: chartContainerRef.current.clientWidth });\n    };\n\n    const chart = createChart(chartContainerRef.current, {\n      layout: {\n        background: { type: ColorType.Solid, color: backgroundColor },\n        textColor,\n      },\n      leftPriceScale: {\n        visible: true,\n      },\n      rightPriceScale: {\n        visible: false,\n      },\n      width: chartContainerRef.current.clientWidth,\n      height: 300,\n    });\n    chart.timeScale().fitContent();\n\n    const getChartTypeDefaultOptions = (\n      type,\n      { lineColor, topColor, bottomColor, color }\n    ) => {\n      switch (type) {\n        case \"bar\":\n          return chart.addBarSeries({ lineColor, topColor, bottomColor });\n        case \"line\":\n          return chart.addLineSeries({\n            lineColor,\n            topColor,\n            color,\n            bottomColor,\n            priceFormat: {\n              type: \"custom\",\n              formatter: (price) => price.toLocaleString(),\n            },\n            axisLabelVisible: true,\n            title: \"TON\",\n          });\n        case \"histogram\":\n          return chart.addHistogramSeries({\n            lineColor,\n            topColor,\n            color,\n            bottomColor,\n            priceFormat: {\n              type: \"custom\",\n              formatter: (price) => price.toLocaleString(),\n            },\n            axisLabelVisible: true,\n            title: \"TON\",\n          });\n        case \"area\":\n          return chart.addAreaSeries({ lineColor, topColor, bottomColor });\n        case \"baseline\":\n          return chart.addBaselineSeries({ lineColor, topColor, bottomColor });\n        case \"candlestick\":\n          return chart.addCandlestickSeries({\n            lineColor,\n            topColor,\n            bottomColor,\n          });\n        default:\n          return chart.addLineSeries({ lineColor, topColor, bottomColor });\n      }\n    };\n\n    const addSeriesAndLegend = (seriesData, seriesIndex) => {\n      const color = generateRandomColor();\n      const newSeries = getChartTypeDefaultOptions(type, { color });\n      newSeries.setData(seriesData.data);\n      setLegend((prevLegends) => [\n        ...prevLegends,\n        { color, text: seriesData.title },\n      ]);\n    };\n\n    // eslint-disable-next-line array-callback-return\n    data.map((seriesData, index) => {\n      addSeriesAndLegend(seriesData, index);\n    });\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      setLegend([]);\n      chart.remove();\n    };\n  }, [\n    data,\n    backgroundColor,\n    type,\n    series,\n    lineColor,\n    textColor,\n    areaTopColor,\n    areaBottomColor,\n  ]);\n\n  return (\n    <div>\n      <div ref={chartContainerRef} />\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        {legend.map((legend, index) => (\n          <div key={index} style={{ color: legend.color, margin: \"0 10px\" }}>\n            <strong>{legend.text}</strong>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { env } from \"configs/EnvironmentConfig\";\r\nimport { authHeader } from \"./AuthHeader\";\r\n\r\nconst URL_BASE = env.API_ENDPOINT_URL;\r\n\r\nexport const DashboardService = {\r\n    listDataByClient: async (id, option,company) => {\r\n        const url = `${URL_BASE}/dashboard/listbyclient/${id}?option=${option}&company=${company}`;\r\n        const response = await fetch(url, {\r\n            headers: authHeader(),\r\n        });\r\n        const data = await response.json();\r\n        return data;\r\n    },\r\n};","import { Card, Col, Row, Select } from \"antd\";\r\nimport { ChartComponent } from \"components/app-components/Global/ChartComponent\";\r\nimport AppHeader from \"components/shared-components/AppHeader\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { DashboardService } from \"services/DashboardService\";\r\n\r\nexport const DefaultDashboard = () => {\r\n  const [allDashboardData, setAllDashboardData] = useState([]);\r\n  const [option, setOption] = useState(\"DAY\");\r\n\r\n  const { Option } = Select;\r\n\r\n  const clientId = useSelector((state) => state?.auth?.user?.clientId);\r\n  //const company = useSelector((state) => state?.auth?.user?.company);\r\n  const company = useSelector((state) => state?.companySlice?.company);\r\n\r\n\r\n  useEffect(() => {\r\n    DashboardService.listDataByClient(clientId, option,company).then((response) => {\r\n      setAllDashboardData(response);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [option,company]);\r\n\r\n  const onChange = (value) => {\r\n    setOption(value)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppHeader\r\n        title=\"Dashboard\"\r\n        items={[{ title: \"Home\", link: \"/app\" }, { title: \"Dashboard\" }]}\r\n      />\r\n      <Row gutter={16} style={{ marginTop: \"15px\" }}>\r\n        <Select\r\n          style={{\r\n            width: \"auto\",\r\n            paddingLeft: \"8px\"\r\n          }}\r\n          defaultValue={\"DAY\"}\r\n          onChange={onChange}\r\n        >\r\n          <Option value=\"DAY\">Ver por Días</Option>\r\n          <Option value=\"MONTH\">Ver por meses</Option>\r\n          <Option value=\"YEAR\">Ver por años</Option>\r\n        </Select>\r\n      </Row>\r\n      <Row gutter={16} style={{ marginTop: \"15px\" }}>\r\n        {allDashboardData?.map((item, index) => {\r\n          return (\r\n            <Col span={12} key={index}>\r\n              <Card title={item.title} className=\"mb-4\">\r\n                <ChartComponent type={\"histogram\"} data={item.data} series={index} />\r\n              </Card>\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultDashboard;\r\n"],"names":["title","items","css","MEDIA_QUERIES","className","id","fallback","translate","t","useTranslation","authHeader","jwtToken","localStorage","getItem","AUTH_TOKEN","Authorization","Math","random","ChartComponent","props","data","type","series","colors","backgroundColor","lineColor","textColor","areaTopColor","areaBottomColor","chartContainerRef","useRef","useState","legend","setLegend","useEffect","handleResize","chart","applyOptions","width","current","clientWidth","createChart","layout","background","ColorType","color","leftPriceScale","visible","rightPriceScale","height","timeScale","fitContent","addSeriesAndLegend","seriesData","seriesIndex","green","floor","toString","padStart","blue","generateRandomColor","newSeries","topColor","bottomColor","addBarSeries","addLineSeries","priceFormat","formatter","price","toLocaleString","axisLabelVisible","addHistogramSeries","addAreaSeries","addBaselineSeries","addCandlestickSeries","getChartTypeDefaultOptions","setData","prevLegends","text","map","index","window","addEventListener","removeEventListener","remove","ref","style","display","justifyContent","margin","URL_BASE","env","DashboardService","listDataByClient","option","company","url","fetch","headers","response","json","DefaultDashboard","allDashboardData","setAllDashboardData","setOption","Option","Select","clientId","useSelector","state","auth","user","companySlice","then","AppHeader","link","gutter","marginTop","paddingLeft","defaultValue","onChange","value","item","span"],"sourceRoot":""}